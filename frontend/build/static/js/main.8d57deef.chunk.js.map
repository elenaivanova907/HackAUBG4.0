{"version":3,"sources":["components/Speak.js","utilities.js","App.js","index.js"],"names":["Speak","props","speak","useSpeechSynthesis","useEffect","mode","text","object","drawRect","detections","ctx","setDetectedClass","forEach","prediction","x","y","width","height","color","Math","floor","random","toString","strokeStyle","font","beginPath","fillStyle","fillText","rect","stroke","videoConstraints","facingMode","App","useState","status","setStatus","detectedClass","webcamRef","useRef","canvasRef","runCoco","a","cocossd","net","console","log","setInterval","detect","current","video","readyState","videoWidth","videoHeight","obj","getContext","setTimeout","app","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","database","getDatabase","valueRef","ref","onValue","snapshot","data","val","initializeFirebaseListener","className","muted","style","marginLeft","marginRight","left","right","textAlign","zindex","position","onClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8d57deef.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useSpeechSynthesis } from \"react-speech-kit\";\n\nconst Speak = (props) => {\n  const { speak } = useSpeechSynthesis();\n\n  useEffect(() => {\n    if (props.mode === 1) {\n      // console.log(\"Child is rerendered\");\n      speak({ text: `There is a ${props.object}` });\n    }\n  }, [props.mode]);\n\n  return <div></div>;\n};\n\nexport default Speak;\n","export const drawRect = (detections, ctx, setDetectedClass) =>{\n  // Loop through each prediction\n  detections.forEach(prediction => {\n\n    // Extract boxes and classes\n    const [x, y, width, height] = prediction['bbox']; \n    const text = prediction['class']; \n    setDetectedClass(text)\n    // console.log(text)\n\n    // Set styling\n    const color = Math.floor(Math.random()*16777215).toString(16);\n    ctx.strokeStyle = '#' + color\n    ctx.font = '18px Arial';\n\n    // Draw rectangles and text\n    ctx.beginPath();   \n    ctx.fillStyle = '#' + color\n    ctx.fillText(text, x, y);\n    ctx.rect(x, y, width, height); \n    ctx.stroke();\n  });\n}\n","// Import dependencies\nimport React, { useRef, useState, useEffect } from \"react\";\nimport * as tf from \"@tensorflow/tfjs\";\nimport * as cocossd from \"@tensorflow-models/coco-ssd\";\nimport Webcam from \"react-webcam\";\nimport \"./App.css\";\nimport Speak from \"./components/Speak\";\nimport { useSpeechSynthesis } from \"react-speech-kit\";\nimport { drawRect } from \"./utilities\";\nimport { initializeApp } from \"firebase/app\";\nimport { getDatabase } from \"firebase/database\";\nimport { ref, onValue, child, get } from \"firebase/database\";\n\nconst videoConstraints = {\n  facingMode: \"environment\"\n};\n\nfunction App() {\n  const { speak } = useSpeechSynthesis();\n  const [status, setStatus] = useState(0)\n  const [detectedClass, setDetectedClass] = useState('')\n  const webcamRef = useRef(null);\n  const canvasRef = useRef(null);\n\n  const buttonClickedHandler = function() {\n    speak({ text: `There is a ${detectedClass}` })\n  }\n\n  const initializeFirebaseListener = () => {\n    const app = initializeApp({\n      apiKey: \"AIzaSyDse67anXkkzVoGuCXKT1f6rNxKHb-x9s0\",\n      authDomain: \"phoenix-ec8d2.firebaseapp.com\",\n      databaseURL:\n        \"https://phoenix-ec8d2-default-rtdb.europe-west1.firebasedatabase.app\",\n      projectId: \"phoenix-ec8d2\",\n      storageBucket: \"phoenix-ec8d2.appspot.com\",\n      messagingSenderId: \"553854497928\",\n      appId: \"1:553854497928:web:ba67e6f5e6470e0a25db3d\",\n      measurementId: \"G-YYW7BZBW7H\",\n    });\n    const database = getDatabase(app);\n\n    const valueRef = ref(database, \"value\");\n    onValue(valueRef, (snapshot) => {\n      const data = snapshot.val();\n      setStatus(data)\n      console.log(data)\n    });\n  }\n\n  // Main function\n  const runCoco = async () => {\n    const net = await cocossd.load();\n    console.log(\"Model loaded.\");\n\n    //  Loop and detect hands\n    setInterval(() => {\n      detect(net);\n      // initializeFirebaseListener();\n    }, 10);\n  };\n\n  const detect = async (net) => {\n    // Check data is available\n    if (\n      typeof webcamRef.current !== \"undefined\" &&\n      webcamRef.current !== null &&\n      webcamRef.current.video.readyState === 4\n    ) {\n      // Get Video Properties\n      const video = webcamRef.current.video;\n      const videoWidth = webcamRef.current.video.videoWidth; \n      const videoHeight = webcamRef.current.video.videoHeight;\n\n      // Set video width\n      webcamRef.current.video.width = videoWidth;\n      webcamRef.current.video.height = videoHeight;\n\n      // Set canvas height and width\n      canvasRef.current.width = videoWidth;\n      canvasRef.current.height = videoHeight;\n\n      // Make Detections\n      const obj = await net.detect(video);\n\n      // Draw mesh\n      const ctx = canvasRef.current.getContext(\"2d\");\n      drawRect(obj, ctx, setDetectedClass); \n    }\n  };\n\n  const changeHandler = (e) => {\n    if (e.detail === 1) {\n      setStatus(1)\n    } else if (e.detail === 2 || e.detail === 3){\n      setStatus(2)\n    }\n  }\n\n  useEffect(()=>{\n    runCoco()\n    setTimeout(initializeFirebaseListener(), 1000);\n  },[]);\n\n  return (\n    <div className=\"App\">\n      <h1>Class: {detectedClass}</h1>\n      <Speak mode={status} object={detectedClass} />\n      <header className=\"App-header\">\n        <div className=\"webcamCapture\">\n          <Webcam\n            ref={webcamRef}\n            muted={true}\n            videoConstraints={videoConstraints}\n            style={{\n              marginLeft: \"auto\",\n              marginRight: \"auto\",\n              left: 0,\n              right: 0,\n              textAlign: \"center\",\n              zindex: 9,\n            }}\n          />\n\n          <canvas\n            ref={canvasRef}\n            style={{\n              position: \"absolute\",\n              marginLeft: \"auto\",\n              marginRight: \"auto\",\n              left: 0,\n              right: 0,\n              textAlign: \"center\",\n              zindex: 8,\n            }}\n          />\n        </div>\n      </header>\n      <button onClick={buttonClickedHandler}>\n        Speak\n      </button>\n      {/* <button onClick={changeHandler}>\n        Change\n      </button> */}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}